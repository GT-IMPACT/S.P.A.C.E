
def mixingConfigRefMap = 'mixins.' + modId + '.refmap.json'
def mixinTmpDir = buildDir.path + File.separator + 'tmp' + File.separator + 'mixins'
def refMap = "${mixinTmpDir}" + File.separator + mixingConfigRefMap
def mixinSrg = "${mixinTmpDir}" + File.separator + "mixins.srg"

tasks.register("generateAssets") {
    group = "IMPACT MIXINS"
    description = "Generates a mixin config file at /src/main/resources/mixins.modid.json if needed"
    onlyIf { useMixins && generateMixinJson.toBoolean() }
    doLast {
        def mixinConfigFile = layout.projectDirectory.file("/src/main/resources/mixins." + modId + ".json").asFile
        if (!mixinConfigFile.exists()) {
            def mixinPluginLine = ""
            if (!mixinPlugin.isEmpty()) {
                mixinPluginLine += """\n  "plugin": "${modGroup}.${modId}.${mixinPlugin}", """
            }

            mixinConfigFile.text = """{
  "required": true,
  "minVersion": "0.8.5-GTNH",
  "package": "${modGroup}.${modId}.${mixinsPackage}",${mixinPluginLine}
  "refmap": "${mixingConfigRefMap}",
  "target": "@env(DEFAULT)",
  "compatibilityLevel": "JAVA_8",
  "mixins": [],
  "client": [],
  "server": []
}
"""
        }
    }
}


if (useMixins) {
    tasks.named("compileJava", JavaCompile).configure {
        doFirst {
            new File(mixinTmpDir).mkdirs()
        }
        options.compilerArgs += [
                "-AreobfSrgFile=${project.file('build/srgs/mcp-srg.srg').canonicalPath}",
                "-AoutSrgFile=${mixinSrg}",
                "-AoutRefMapFile=${refMap}",
                "-XDenableSunApiLintControl",
                "-XDignore.symbol.file"
        ]
    }

    tasks.named("processResources", ProcessResources).configure {
        if (useMixins) {
            from refMap
            dependsOn("compileJava")
        }
    }

    jar {
        manifest {
            attributes(getManifestAttributes())
        }
    }
    devJar {
        manifest {
            attributes(getManifestAttributes())
        }
    }

    task copySrgs(type: Copy, dependsOn: 'genSrgs') {
        from plugins.getPlugin("forge").delayedFile('{SRG_DIR}')

        include '**/*.srg'
        into 'build/srgs'
    }
    compileJava.dependsOn copySrgs

}

def getManifestAttributes() {
    def manifestAttributes = [:]
    if (useMixins) {
        manifestAttributes += [
                "FMLCorePluginContainsFMLMod": true,
                "TweakClass"    : "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs"  : "mixins." + modId + ".json",
                "ForceLoadAsMod"             : true,
        ]
    }

    return manifestAttributes
}

runClient {
    args "--tweakClass", "org.spongepowered.asm.launch.MixinTweaker"
}

runServer {
    args "--tweakClass", "org.spongepowered.asm.launch.MixinTweaker"
}
